service: serverlessphoenix
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverlessUser
  environment:
    PLC_TABLE: ${self:custom.PLC_TABLE}
  apiGateway: {
    shouldStartNameWithService: true
  }
  region: eu-central-1
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: '*'
    
functions:
  app:
    handler: index.handler
    events:
      - http: 
          path: /
          method: get
          cors: true
      - http: 
          path: /{proxy+}
          method: any
          cors: true 
  plcIoT:
    handler: IotCoreRules/plcNextRule.handler
    events:
      - iot:
          name: 'PLCEvent'
          sql: "SELECT * FROM 'OperationalParams'"
          description: 'Get a data set from PLCNext'

plugins:
  - serverless-s3-sync

custom:
  PLC_TABLE: PLC
  bucketName: smart-phoenix-systems-new
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir : ../build
          
resources:
    Resources:
        ReactAppBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.bucketName}
                AccessControl: PublicRead
                WebsiteConfiguration:
                    IndexDocument: index.html
                    ErrorDocument: index.html
        S3AccessPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket:
                    Ref: ReactAppBucket
                PolicyDocument:
                    Statement:
                        - Sid: PublicReadGetObject
                          Effect: Allow
                          Principal: '*'
                          Action:
                              - s3:GetObject
                          Resource: arn:aws:s3:::${self:custom.bucketName}/*
        # CloudFrontDistribution:
        #     Type: AWS::CloudFront::Distribution
        #     Properties:
        #         DistributionConfig:
        #             Origins:
        #                 - DomainName: ${self:custom.bucketName}.s3.amazonaws.com
        #                   Id: ReactApp
        #                   CustomOriginConfig:
        #                       HTTPPort: 80
        #                       HTTPSPort: 443
        #                       OriginProtocolPolicy: https-only
        #             Enabled: 'true'
        #             DefaultRootObject: index.html
        #             CustomErrorResponses:
        #                 - ErrorCode: 404
        #                   ResponseCode: 200
        #                   ResponsePagePath: /index.html
        #             DefaultCacheBehavior:
        #                 AllowedMethods:
        #                     - DELETE
        #                     - GET
        #                     - HEAD
        #                     - OPTIONS
        #                     - PATCH
        #                     - POST
        #                     - PUT
        #                 TargetOriginId: ReactApp
        #                 ForwardedValues:
        #                     QueryString: 'false'
        #                     Cookies:
        #                         Forward: none
        #                 ViewerProtocolPolicy: redirect-to-https
        #             ViewerCertificate:
        #                 CloudFrontDefaultCertificate: true
